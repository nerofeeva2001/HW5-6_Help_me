# Функция для транскрибирования ДНК в РНК
def transcribe(dna):
    # Заменяем все T на U
    rna = dna.replace('T', 'U')
    # Возвращаем результат
    return rna

# Функция для переворачивания последовательности
def reverse(seq):
    # Используем срез с отрицательным шагом
    rev = seq[::-1]
    # Возвращаем результат
    return rev

# Функция для нахождения комплементарной последовательности
def complement(seq):
    # Создаем словарь с парами комплементарных нуклеотидов
    comp_dict = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G',
                 'a': 't', 't': 'a', 'g': 'c', 'c': 'g',
                 'U': 'T', 'G': 'C', 'C': 'G',
                 'u': 't', 'g': 'c', 'c': 'g'}
    # Инициализируем пустую строку для комплементарной последовательности
    comp = ''
    # Проходим по каждому символу в исходной последовательности
    for s in seq:
        # Если символ есть в словаре, добавляем его комплементарный нуклеотид к результату
        if s in comp_dict:
            comp += comp_dict[s]
        # Иначе, добавляем символ без изменений
        else:
            comp += s
    # Возвращаем результат
    return comp

# Функция для нахождения обратной комплементарной последовательности
def reverse_complement(seq):
    # Сначала находим комплементарную последовательность
    comp = complement(seq)
    # Потом переворачиваем ее
    rev_comp = reverse(comp)
    # Возвращаем результат
    return rev_comp

# Функция для выполнения процедур над последовательностями ДНК или РНК
def run_dna_rna_tools(*args):
    # Проверяем, что есть хотя бы один аргумент
    if len(args) == 0:
        return "Ошибка: не переданы аргументы"

    # Извлекаем название процедуры из последнего аргумента
    procedure = args[-1]

    # Проверяем, что процедура является одной из допустимых
    if procedure not in ['transcribe', 'reverse', 'complement', 'reverse_complement']:
        return f"Ошибка: неизвестная процедура {procedure}"

    # Создаем пустой список для результатов
    results = []

    # Проходим по всем аргументам, кроме последнего
    for arg in args[:-1]:
        # Проверяем, что аргумент является строкой
        if not isinstance(arg, str):
            return f"Ошибка: аргумент {arg} не является строкой"

        # Проверяем, что аргумент содержит только символы A, T, G, C или U (в любом регистре)
        if not all(s in "ATGCatgcuU" for s in arg):
            return f"Ошибка: аргумент {arg} содержит недопустимые символы"

        # Проверяем, что аргумент не содержит одновременно T и U (в любом регистре)
        if ('T' in arg or 't' in arg) and ('U' in arg or 'u' in arg):
            return f"Ошибка: аргумент {arg} содержит одновременно T и U"

        # Выполняем процедуру над аргументом и добавляем результат к списку
        result = eval(procedure + '(arg)')
        results.append(result)

    # Если подана одна последовательность, возвращаем строку с результатом
    if len(results) == 1:
        return results[0]

    # Иначе, возвращаем список из строк
    else:
        return results
